"use strict";

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }
function asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }
function _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }
// Load pre-trained model

// Run the example
// runExample();

document.addEventListener("DOMContentLoaded", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
  var images, urlParams, idCar, id_comment;
  return _regeneratorRuntime().wrap(function _callee$(_context) {
    while (1) switch (_context.prev = _context.next) {
      case 0:
        images = [];
        urlParams = new URLSearchParams(window.location.search);
        idCar = urlParams.get('id_car');
        id_comment = null;
        _context.next = 6;
        return getCarsInfo(idCar);
      case 6:
        _context.next = 8;
        return getCommentByidCar(idCar);
      case 8:
        document.getElementById("form_user_comment").addEventListener('submit', function (event) {
          event.preventDefault();
          addComment(idCar);
        });
      case 9:
      case "end":
        return _context.stop();
    }
  }, _callee);
})));
document.getElementById('uploadImageButton').addEventListener('click', function () {
  document.getElementById('imageUpload').click();
});
document.getElementById('imageUpload').addEventListener('change', handleFileSelect);
var selectedFiles = [];
function handleFileSelect(event) {
  var files = event.target.files;
  var previewContainer = document.getElementById('previewContainer');
  previewContainer.innerHTML = ''; // Clear any existing previews

  Array.from(files).forEach(function (file) {
    selectedFiles.push(file); // Add to the selectedFiles array

    var reader = new FileReader();
    reader.onload = function (e) {
      var imgContainer = document.createElement('div');
      imgContainer.classList.add('img-container');
      var img = document.createElement('img');
      img.src = e.target.result;
      img.classList.add('preview-image');
      var removeButton = document.createElement('button');
      removeButton.innerHTML = 'X';
      removeButton.classList.add('remove-button');
      removeButton.addEventListener('click', function () {
        imgContainer.remove();
        updateFileList(file); // Update file list on removal
      });
      imgContainer.appendChild(img);
      imgContainer.appendChild(removeButton);
      previewContainer.appendChild(imgContainer);
    };
    reader.readAsDataURL(file);
  });
}
function updateFileList(fileToRemove) {
  selectedFiles = selectedFiles.filter(function (file) {
    return file !== fileToRemove;
  });
}
function addComment(_x) {
  return _addComment.apply(this, arguments);
}
function _addComment() {
  _addComment = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(id_car) {
    var formData, noidung, currentTime, response, confirmResult, data;
    return _regeneratorRuntime().wrap(function _callee2$(_context2) {
      while (1) switch (_context2.prev = _context2.next) {
        case 0:
          formData = new FormData();
          noidung = document.getElementById('comment').value;
          currentTime = new Date().toISOString();
          formData.append('id_car', id_car);
          formData.append('noidung', noidung);
          formData.append('like_status', false);
          formData.append('created_at', currentTime);
          selectedFiles.forEach(function (file) {
            formData.append('images', file);
          });
          _context2.prev = 8;
          _context2.next = 11;
          return fetch('/addComments', {
            method: 'POST',
            body: formData,
            credentials: 'include'
          });
        case 11:
          response = _context2.sent;
          if (response.ok) {
            _context2.next = 18;
            break;
          }
          document.getElementById('comment').value = '';
          confirmResult = confirm("Bạn cần đăng nhập để tiếp tục. Bạn có muốn chuyển đến trang đăng nhập không?");
          if (confirmResult === true) {
            window.open('/login', '_blank');
          }
          _context2.next = 22;
          break;
        case 18:
          _context2.next = 20;
          return response.json();
        case 20:
          data = _context2.sent;
          if (data) {
            console.log('Comment added successfully:', data);
            document.getElementById('form_user_comment').reset();
            document.getElementById('previewContainer').innerHTML = '';
            selectedFiles = [];
            getCommentByidCar(id_car); // Refresh comments
          } else {}
        case 22:
          _context2.next = 27;
          break;
        case 24:
          _context2.prev = 24;
          _context2.t0 = _context2["catch"](8);
          console.error('Error adding comment:', _context2.t0);
        case 27:
        case "end":
          return _context2.stop();
      }
    }, _callee2, null, [[8, 24]]);
  }));
  return _addComment.apply(this, arguments);
}
function getCommentByidCar(_x2) {
  return _getCommentByidCar.apply(this, arguments);
}
function _getCommentByidCar() {
  _getCommentByidCar = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(id_car) {
    var response, commentData;
    return _regeneratorRuntime().wrap(function _callee3$(_context3) {
      while (1) switch (_context3.prev = _context3.next) {
        case 0:
          _context3.prev = 0;
          _context3.next = 3;
          return fetch('/getCommentByidCar', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/x-www-form-urlencoded'
            },
            body: new URLSearchParams({
              id_car: id_car
            })
          });
        case 3:
          response = _context3.sent;
          if (response.ok) {
            _context3.next = 6;
            break;
          }
          throw new Error('Network response was not ok');
        case 6:
          _context3.next = 8;
          return response.json();
        case 8:
          commentData = _context3.sent;
          commentData.sort(function (a, b) {
            return new Date(a.comment_created_at) - new Date(b.comment_created_at);
          });
          displayComments(commentData);
          setTimeout(function () {
            var commentContainer = document.getElementById('comment_User');
            commentContainer.lastElementChild.scrollIntoView({
              behavior: 'smooth',
              block: 'end'
            });
          }, 100); // Thời gian chờ có thể điều chỉnh tùy ý
          _context3.next = 17;
          break;
        case 14:
          _context3.prev = 14;
          _context3.t0 = _context3["catch"](0);
          console.error('There was a problem with the fetch operation:', _context3.t0);
        case 17:
        case "end":
          return _context3.stop();
      }
    }, _callee3, null, [[0, 14]]);
  }));
  return _getCommentByidCar.apply(this, arguments);
}
function getCarsInfo(_x3) {
  return _getCarsInfo.apply(this, arguments);
}
function _getCarsInfo() {
  _getCarsInfo = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(idCar) {
    var response, carData;
    return _regeneratorRuntime().wrap(function _callee4$(_context4) {
      while (1) switch (_context4.prev = _context4.next) {
        case 0:
          _context4.prev = 0;
          _context4.next = 3;
          return fetch('/getCarByid', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/x-www-form-urlencoded'
            },
            body: new URLSearchParams({
              id_car: idCar
            })
          });
        case 3:
          response = _context4.sent;
          if (response.ok) {
            _context4.next = 6;
            break;
          }
          throw new Error('Network response was not ok');
        case 6:
          _context4.next = 8;
          return response.json();
        case 8:
          carData = _context4.sent;
          displayCars(carData);
          return _context4.abrupt("return", carData);
        case 13:
          _context4.prev = 13;
          _context4.t0 = _context4["catch"](0);
          console.error('There was a problem with the fetch operation:', _context4.t0);
        case 16:
        case "end":
          return _context4.stop();
      }
    }, _callee4, null, [[0, 13]]);
  }));
  return _getCarsInfo.apply(this, arguments);
}
function displayCars(carData) {
  var carListContainer = document.getElementById('car-list');
  carListContainer.innerHTML = '';
  var carInfo = carData;
  var imagesarr = [];
  var carElement = document.createElement('div');
  carElement.classList.add('car-card');
  carElement.innerHTML = "\n        <h2 class=\"car-name\">".concat(carInfo.carname, "</h2>\n        <p class=\"car-details car-automaker\"><strong>H\xE3ng Xe:</strong> ").concat(carInfo.automaker, "</p>\n        <p class=\"car-details car-price\"><strong>Gi\xE1 Xe:</strong> ").concat(carInfo.price, "</p>\n        <p class=\"car-description\">").concat(carInfo.description, "</p>\n        <div class=\"car-owner\">\n            <h3 class=\"owner-title\">Li\xEAn H\u1EC7</h3>\n            <p class=\"owner-details owner-name\"><strong>T\xEAn Ng\u01B0\u1EDDi \u0110\u0103ng:</strong> ").concat(carInfo.user_ten, "</p>\n            <p class=\"owner-details owner-phone\"><strong>S\u1ED1 \u0110i\u1EC7n Tho\u1EA1i:</strong> ").concat(carInfo.user_sdt, "</p>\n            <p class=\"owner-details owner-address\"><strong>\u0110\u1ECBa Ch\u1EC9:</strong> ").concat(carInfo.user_diachi, "</p>\n        </div>\n        <p class=\"car-details\"><strong>Th\u1EDDi Gian \u0110\u0103ng:</strong> ").concat(getTimeDifference(carInfo.car_created_at), "</p>\n        <div class=\"like-dislike-container\">\n        <button class=\"like-btn\">\n            <span class=\"like-icon\">&#x1F44D;</span>\n            <p class=\"like-count\">1000 Likes</p>\n        </button>\n        <button class=\"dislike-btn\">\n            <span class=\"dislike-icon\">&#x1F44E;</span>\n            <p class=\"dislike-count\">100 Dislikes</p>\n        </button>\n    </div>\n    ");
  var carImagesContainer = document.createElement('div');
  carImagesContainer.classList.add('car-images');
  var _loop = function _loop(i) {
    var imageSrc = carInfo["image".concat(i)];
    imagesarr.push(imageSrc);
    if (imageSrc) {
      var imageElement = document.createElement('img');
      imageElement.src = imageSrc;
      imageElement.alt = "Car Image ".concat(i);
      imageElement.classList.add('car-image');
      imageElement.addEventListener('click', function () {
        console.log(i);
        console.log(carInfo["image".concat(i)]);
        enlargeImage(imageSrc, imagesarr, i);
      });
      carImagesContainer.appendChild(imageElement);
    }
  };
  for (var i = 1; i <= 7; i++) {
    _loop(i);
  }
  carElement.appendChild(carImagesContainer);
  carListContainer.appendChild(carElement);
}
function insertReplycomment(_x4, _x5, _x6) {
  return _insertReplycomment.apply(this, arguments);
}
function _insertReplycomment() {
  _insertReplycomment = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(id_comment, likecomment, noidung) {
    var response, confirmResult, data;
    return _regeneratorRuntime().wrap(function _callee5$(_context5) {
      while (1) switch (_context5.prev = _context5.next) {
        case 0:
          _context5.prev = 0;
          _context5.next = 3;
          return fetch('/insertReplycomment', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/x-www-form-urlencoded'
            },
            body: new URLSearchParams({
              id_comment: id_comment,
              likecomment: likecomment,
              noidung: noidung
            })
          });
        case 3:
          response = _context5.sent;
          if (response.ok) {
            _context5.next = 10;
            break;
          }
          confirmResult = confirm("Bạn cần đăng nhập để tiếp tục. Bạn có muốn chuyển đến trang đăng nhập không?");
          if (confirmResult === true) {
            window.open('/login', '_blank');
          }
          throw new Error('Network response was not ok');
        case 10:
          _context5.next = 12;
          return response.json();
        case 12:
          data = _context5.sent;
          if (data) {
            window.location.reload();
            // alert("Reply comment inserted successfully");
            // getCommentByidCar(id_car).then(() => {
            //     const commentContainer = document.getElementById('comment_User');
            //     commentContainer.lastElementChild.scrollIntoView({ behavior: 'smooth' });
            // });
            // const inputElement = document.querySelector(`.reply-text[data-id="${id_comment}"]`);
            // if (inputElement) {
            //     inputElement.value = '';
            // }
          } else {
            // Xử lý trường hợp khi không có dữ liệu hoặc có lỗi xảy ra
          }
        case 14:
          _context5.next = 19;
          break;
        case 16:
          _context5.prev = 16;
          _context5.t0 = _context5["catch"](0);
          console.error('Error inserting reply comment:', _context5.t0);
          // Handle error as needed
        case 19:
        case "end":
          return _context5.stop();
      }
    }, _callee5, null, [[0, 16]]);
  }));
  return _insertReplycomment.apply(this, arguments);
}
function displayComments(commentdata) {
  var commentList = document.getElementById("comment_User").querySelector("ul");
  commentList.innerHTML = ''; // Clear previous comments
  commentdata.forEach(function (comment) {
    var li = document.createElement("li");
    li.innerHTML = "\n            <p><strong>".concat(comment.user_ten, "</strong>: ").concat(comment.comment_content, "</p>\n            <p class=\"time\"> at: ").concat(getTimeDifference(comment.comment_created_at), "</p>\n            <div class=\"comment-buttons\">\n                <button class=\"like-btn\">Like</button>\n                <button class=\"dislike-btn\">Dislike</button>\n            </div>\n            <div class=\"reply-input\" style=\"display: none;\">\n                <input type=\"text\" class=\"reply-text\" name=\"replyText-").concat(comment.id_comment, "\" placeholder=\"Enter your reply...\"  data-id=\"").concat(comment.id_comment, "\">\n                <button class=\"reply-submit-btn\" onclick=\"handleReplySubmit('").concat(comment.id_comment.toString(), "')\">Reply</button>\n            </div>\n        ");
    // Thêm danh sách phản hồi vào bình luận hiện tại
    if (comment.comment_images) {
      var images = JSON.parse(comment.comment_images);
      var imagearr = [];
      // console.log(images);
      images.forEach(function (image, index) {
        var img = document.createElement('img');
        img.src = image.path; // Use the path from the comment data
        imagearr.push(img.src);
        img.classList.add('comment-image');
        img.addEventListener('click', function () {
          // Gắn sự kiện click vào ảnh
          console.log(index);
          enlargeImage(img.src, imagearr, index); // Sử dụng đường dẫn của ảnh khi click
        });
        li.appendChild(img);
      });
    }
    var replyList = document.createElement("ul");
    replyList.classList.add("reply-list");
    comment.reply_comments.forEach(function (reply) {
      if (reply.id_reply) {
        var replyLi = document.createElement("li");
        replyLi.innerHTML = "\n                <p><strong>".concat(reply.reply_user_ten, "</strong>: ").concat(reply.reply_content, "</p>\n                <p class=\"time\"> at: ").concat(getTimeDifference(reply.reply_created_at), "</p>\n                <div class=\"reply-buttons\">\n                    <button class=\"like-btn\">Like</button>\n                    <button class=\"dislike-btn\">Dislike</button>\n                </div>");
        replyList.appendChild(replyLi);
      }
    });
    li.appendChild(replyList);
    li.addEventListener('click', function (event) {
      event.preventDefault();
      var replyInput = li.querySelector('.reply-input');
      if (replyInput) {
        if (replyInput.style.display === 'block') {
          // replyInput.style.display = 'none';
        } else {
          replyInput.style.display = 'block';
        }
      }
    });
    commentList.appendChild(li);
  });
}
function handleReplySubmit(commentId) {
  var replyInput = document.querySelector(".reply-text[data-id=\"".concat(commentId, "\"]"));
  if (replyInput.value.trim() !== '') {
    // Kiểm tra xem input có rỗng hay không
    var replyText = replyInput.value;
    insertReplycomment(commentId, null, replyText);
    // Sau khi phản hồi đã được gửi đi và comment mới đã được thêm vào, cuộn sẽ di chuyển xuống dưới cùng của phần tử chứa các comment
    var commentContainer = document.getElementById('comment_User');
    commentContainer.lastElementChild.scrollIntoView({
      behavior: 'smooth',
      block: 'end'
    });
  } else {
    alert("Không được để trống");
  }
}
function getTimeDifference(timestamp) {
  var commentTime = new Date(timestamp);
  var currentTime = new Date();
  var timeDiff = currentTime - commentTime;
  var minutes = Math.floor(timeDiff / 1000 / 60);
  if (minutes < 60) {
    return "".concat(minutes, " minutes ago");
  }
  var hours = Math.floor(minutes / 60);
  if (hours < 24) {
    return "".concat(hours, " hours ago");
  }
  var days = Math.floor(hours / 24);
  if (days < 7) {
    return "".concat(days, " days ago");
  }
  var weeks = Math.floor(days / 7);
  if (weeks < 4) {
    return "".concat(weeks, " weeks ago");
  }
  var months = Math.floor(days / 30);
  if (months < 12) {
    return "".concat(months, " months ago");
  }
  var years = Math.floor(months / 12);
  return "".concat(years, " years ago");
}
function enlargeImage(imageSrc, images, currentIndex) {
  var modal = document.createElement('div');
  modal.classList.add('modal');
  var modalContent = document.createElement('div');
  modalContent.classList.add('modal-content');
  var closeButton = document.createElement('span');
  closeButton.innerHTML = '&times;'; // Biểu tượng "X"
  closeButton.classList.add('close');
  closeButton.addEventListener('click', function () {
    modal.remove();
  });
  var zoomButton = document.createElement('span');
  zoomButton.innerHTML = '+'; // Biểu tượng "+"
  zoomButton.classList.add('zoom');
  0;
  var currentScale = 1; // Giá trị ban đầu của scale

  zoomButton.addEventListener('click', function () {
    currentScale += 0.25; // Tăng giá trị scale lên 0.5 mỗi lần click
    img.style.transform = "scale(".concat(currentScale, ")");
  });
  var prevButton = document.createElement('span');
  prevButton.innerHTML = '&#9664;'; // Biểu tượng mũi tên trái
  prevButton.classList.add('prev');
  prevButton.addEventListener('click', function () {
    if (currentIndex > 0) {
      currentIndex--;
      img.src = images[currentIndex];
      currentScale = 1; // Đặt lại scale khi chuyển hình
      img.style.transform = "scale(".concat(currentScale, ")");
    }
  });
  var nextButton = document.createElement('span');
  nextButton.innerHTML = '&#9654;'; // Biểu tượng mũi tên phải
  nextButton.classList.add('next');
  nextButton.addEventListener('click', function () {
    if (currentIndex < images.length - 1) {
      currentIndex++;
      img.src = images[currentIndex];
      currentScale = 1; // Đặt lại scale khi chuyển hình
      img.style.transform = "scale(".concat(currentScale, ")");
    }
  });
  var img = document.createElement('img');
  img.src = imageSrc;
  img.classList.add('modal-image');
  modalContent.appendChild(closeButton);
  modalContent.appendChild(zoomButton);
  modalContent.appendChild(prevButton);
  modalContent.appendChild(nextButton);
  modalContent.appendChild(img);
  modal.appendChild(modalContent);
  document.body.appendChild(modal);

  // Đặt chiều cao của hình ảnh là 90% của chiều cao của màn hình
  var maxHeight = window.innerHeight * 0.9;
  img.style.maxHeight = "".concat(maxHeight, "px");

  // Canh giữa hình ảnh
  modalContent.style.display = 'flex';
  modalContent.style.justifyContent = 'center';
  modalContent.style.alignItems = 'center';
  modalContent.style.height = '100%';

  // Canh giữa modal
  modal.style.display = 'flex';
  modal.style.justifyContent = 'center';
  modal.style.alignItems = 'center';

  // Bắt sự kiện khi click vào modal để đóng modal
  modal.addEventListener('click', function (event) {
    if (event.target === modal) {
      modal.remove();
    }
  });
}
function loadModel() {
  return _loadModel.apply(this, arguments);
} // Perform Super-Resolution
function _loadModel() {
  _loadModel = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {
    var model;
    return _regeneratorRuntime().wrap(function _callee6$(_context6) {
      while (1) switch (_context6.prev = _context6.next) {
        case 0:
          model = tf.sequential();
          return _context6.abrupt("return", model);
        case 2:
        case "end":
          return _context6.stop();
      }
    }, _callee6);
  }));
  return _loadModel.apply(this, arguments);
}
function tangChatluonganh(_x7, _x8) {
  return _tangChatluonganh.apply(this, arguments);
} // Example usage
function _tangChatluonganh() {
  _tangChatluonganh = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(imagePath, model) {
    var inputImage, blob, file, inputTensor, outputTensor, outputImageBuffer;
    return _regeneratorRuntime().wrap(function _callee7$(_context7) {
      while (1) switch (_context7.prev = _context7.next) {
        case 0:
          _context7.next = 2;
          return fetch(imagePath);
        case 2:
          inputImage = _context7.sent;
          _context7.next = 5;
          return inputImage.blob();
        case 5:
          blob = _context7.sent;
          file = new File([blob], "filename"); // Preprocess input image (convert to tensor, normalize, etc.)
          _context7.t0 = tf.node;
          _context7.next = 10;
          return file.arrayBuffer();
        case 10:
          _context7.t1 = _context7.sent;
          inputTensor = _context7.t0.decodeImage.call(_context7.t0, _context7.t1);
          // Perform super-resolution inference
          outputTensor = model.predict(inputTensor); // Convert output tensor to image buffer
          _context7.next = 15;
          return tf.node.encodeJpeg(outputTensor);
        case 15:
          outputImageBuffer = _context7.sent;
          return _context7.abrupt("return", outputImageBuffer);
        case 17:
        case "end":
          return _context7.stop();
      }
    }, _callee7);
  }));
  return _tangChatluonganh.apply(this, arguments);
}
function runExample(_x9) {
  return _runExample.apply(this, arguments);
}
function _runExample() {
  _runExample = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9(inputImagePath) {
    var model, newImageBuffer;
    return _regeneratorRuntime().wrap(function _callee9$(_context9) {
      while (1) switch (_context9.prev = _context9.next) {
        case 0:
          _context9.next = 2;
          return loadModel();
        case 2:
          model = _context9.sent;
          // Define function to increase image quality
          tangChatluonganh = /*#__PURE__*/function () {
            var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8(imagePath) {
              var outputImageBuffer;
              return _regeneratorRuntime().wrap(function _callee8$(_context8) {
                while (1) switch (_context8.prev = _context8.next) {
                  case 0:
                    _context8.next = 2;
                    return superResolution(imagePath, model);
                  case 2:
                    outputImageBuffer = _context8.sent;
                    return _context8.abrupt("return", outputImageBuffer);
                  case 4:
                  case "end":
                    return _context8.stop();
                }
              }, _callee8);
            }));
            return function tangChatluonganh(_x10) {
              return _ref2.apply(this, arguments);
            };
          }();

          // Use the function to increase quality of an image
          // const inputImagePath = 'path/to/input/image.jpg';
          _context9.next = 6;
          return tangChatluonganh(inputImagePath);
        case 6:
          newImageBuffer = _context9.sent;
          return _context9.abrupt("return", newImageBuffer);
        case 8:
        case "end":
          return _context9.stop();
      }
    }, _callee9);
  }));
  return _runExample.apply(this, arguments);
}
"use strict";

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _iterableToArray(r) { if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r); }
function _arrayWithoutHoles(r) { if (Array.isArray(r)) return _arrayLikeToArray(r); }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }
function asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }
function _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }
document.addEventListener("DOMContentLoaded", function () {
  var carCollection = document.getElementById('carCollection');
  var pagination = document.getElementById('pagination');
  var prevButton = document.getElementById('prevButton');
  var nextButton = document.getElementById('nextButton');
  var Select = document.getElementById('select');
  var Select_hangxe = document.getElementById('select-hangxe');
  var filterDiv = document.getElementById('filter');
  var btnSearch = document.getElementById('btnSearch');
  var inputtext = document.getElementById('inputtext');
  var scrollingText = document.getElementById('scrollingText');
  var thongbao = document.getElementById('thongbao');
  var isScrolling = true;
  var carsPerPage = 6 * 8; // 10 xe hàng ngang * 20 xe hàng dọc
  var totalCars = 0; // Tổng số lượng xe
  var currentPage = 1;
  var cars = []; // Mảng chứa thông tin của các xe
  var carShortBy = [];
  var filter = {
    price: null,
    hang: null,
    city: null,
    search: null
  };
  getCars();
  selectLoc();
  loadAddressData();
  // setInterval(() => {
  //     scrollingText.style.visibility = (scrollingText.style.visibility === 'hidden' ? '' : 'hidden');
  // }, 500);

  // Scrolling effect
  var startPosition = thongbao.offsetWidth;
  function scrollText(text) {
    if (isScrolling) {
      startPosition--;
      if (startPosition < -scrollingText.offsetWidth) {
        startPosition = thongbao.offsetWidth; // Dừng cuộn khi văn bản đã chạy hết qua bên trái
      }
      scrollingText.textContent = text;
      scrollingText.style.transform = "translateX(".concat(startPosition, "px)");
      requestAnimationFrame(function () {
        return scrollText(text);
      });
    } else {
      scrollingText.style.visibility = 'hidden'; // Ẩn văn bản khi dừng cuộn
    }
  }
  scrollText("Xe của bạn đã được bảo vệ thành công!");
  Select.addEventListener('change', function () {
    // Lấy giá trị của option đã chọn
    var selectedValue = Select.value;
    switch (selectedValue) {
      case 'Giá từ thấp đến cao ':
        filterByPrice("Giá từ thấp đến cao");
        appendLabel("Giá từ thấp đến cao");
        break;
      case 'Giá từ cao đến thấp ':
        filterByPrice("Giá từ cao đến thấp");
        appendLabel("Giá từ cao đến thấp");
        break;
      default:
        console.log('Giá trị không hợp lệ');
    }
  });
  SelectHangxe();
  Select_hangxe.addEventListener('change', function () {
    // Lấy giá trị của option đã chọn
    var selectedValue = Select_hangxe.value;
    filterByHang(selectedValue);
    appendLabel(selectedValue);
  });
  document.getElementById('inputtext').addEventListener('keypress', /*#__PURE__*/function () {
    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(event) {
      return _regeneratorRuntime().wrap(function _callee$(_context) {
        while (1) switch (_context.prev = _context.next) {
          case 0:
            if (event.key === 'Enter') {
              event.preventDefault(); // Ngăn chặn hành động mặc định của phím Enter
              if (inputtext.value.trim()) {
                filterSearch(inputtext.value.trim());
              } else {
                alert("Khong duoc de trong");
              }
            }
          case 1:
          case "end":
            return _context.stop();
        }
      }, _callee);
    }));
    return function (_x) {
      return _ref.apply(this, arguments);
    };
  }());
  btnSearch.addEventListener('click', function () {
    // Lấy giá trị của option đã chọn
    // const selectedValue = Select_hangxe.value;
    if (inputtext.value.trim()) {
      filterSearch(inputtext.value.trim());
    } else {
      alert("Khong duoc de trong");
    }
  });
  document.getElementById('select-diachi').addEventListener('change', function () {
    var selectedValue = this.options[this.selectedIndex].text;
    filterByCity(selectedValue);
    appendLabel(selectedValue);
  });
  function filterByPrice(param) {
    filter['price'] = param;
    updateFilter();
  }
  function filterByHang(param) {
    filter['hang'] = param;
    updateFilter();
  }
  function filterByCity(param) {
    filter['city'] = param;
    updateFilter();
  }
  function filterSearch(param) {
    filter['search'] = param;
    updateFilter();
  }
  function updateFilter() {
    carShortBy = _toConsumableArray(cars);

    // Lọc theo giá
    if (filter.price) {
      if (filter.price === "Giá từ thấp đến cao") {
        carShortBy.sort(function (car1, car2) {
          return car1.price - car2.price;
        });
      } else if (filter.price === "Giá từ cao đến thấp") {
        carShortBy.sort(function (car1, car2) {
          return car2.price - car1.price;
        });
      }
    }

    // Lọc theo hãng
    if (filter.hang) {
      carShortBy = carShortBy.filter(function (car) {
        return car.automaker === filter.hang;
      });
    }
    // Lọc theo thành phố
    if (filter.city) {
      var targetProvince = filter.city.trim();
      var regex = new RegExp("\\b".concat(targetProvince, "\\b"), 'i');
      carShortBy = carShortBy.filter(function (car) {
        return regex.test(car.diachi);
      });
    }
    if (filter.search) {
      carShortBy = carShortBy.filter(function (item) {
        // Duyệt qua tất cả các trường của đối tượng arrCars
        for (var key in item) {
          // Kiểm tra nếu giá trị của trường là một chuỗi và chứa từ khóa tìm kiếm
          if (typeof item[key] === 'string' && item[key].toLowerCase().includes(filter.search.toLowerCase())) {
            return true; // Trả về true nếu có bất kỳ trường nào thỏa mãn điều kiện
          }
        }
        return false; // Trả về false nếu không có trường nào thỏa mãn điều kiện
      });
    }

    // Sau khi áp dụng bộ lọc, trả về mảng carShortBy mới              
    // console.log(carShortBy);
    displayCars(1, carShortBy); // Hiển thị các xe trên trang
    createPaginationButtons(carShortBy); // Tạo nút phân trang
  }
  function createLabel(text) {
    var labelContainer = document.createElement('div');
    labelContainer.classList.add('label-container');
    var label = document.createElement('label');
    label.textContent = text;
    var closeButton = document.createElement('span');
    closeButton.textContent = 'x';
    closeButton.classList.add('close-btn');
    closeButton.onclick = function () {
      // Xóa tiêu chí khỏi filter
      if (text.includes('Giá từ')) {
        filter.price = null;
        filter.search = null;
      } else if (filter.hang === text) {
        filter.search = null;
        filter.hang = null;
      } else if (filter.city === text) {
        filter.search = null;
        filter.city = null;
      }
      labelContainer.remove();
      updateFilter();
    };
    labelContainer.appendChild(label);
    labelContainer.appendChild(closeButton);
    return labelContainer;
  }
  function appendLabel(text) {
    var existingLabels = Array.from(document.querySelectorAll('.label-container label'));
    var isExisting = existingLabels.some(function (label) {
      return label.textContent === text;
    });
    if (!isExisting) {
      filterDiv.appendChild(createLabel(text));
    }
  }
  function getRandomNumber() {
    // Sinh số ngẫu nhiên từ 1 đến 7
    return Math.floor(Math.random() * 7) + 1;
  }
  function displayCars(page, data) {
    carCollection.innerHTML = '';
    inputtext.value = '';
    var startIndex = (page - 1) * carsPerPage;
    var endIndex = Math.min(startIndex + carsPerPage, totalCars);
    // console.log("Data received:", data); // Debug: Kiểm tra dữ liệu truyền vào hàm
    var _loop = function _loop() {
      a = getRandomNumber();
      var car = data[i];
      // console.log("Current car:", car); // Debug: Kiểm tra dữ liệu của từng xe
      if (car) {
        var carElement = document.createElement('div');
        carElement.classList.add('car');
        carElement.innerHTML = "\n                    <h3>".concat(car.carname, "</h3>\n                    <p class=\"p-price\">Gi\xE1: ").concat(formatCurrencyToString(car.price) + " VNĐ", "</p>\n                    <p class=\"p-year\">N\u0103m: ").concat(car.sxyear, "</p>\n                    <p class=\"p-time\">Th\u1EDDi gian: ").concat(getTimeDifference(car.created_at), "</p>\n                    <img src=\"").concat(car['image' + a], "\" alt=\"").concat(car.carname, "\" class=\"image-size\"></img>\n                    <p class=\"p-diachi\">").concat(car.diachi, "</p>\n                    <p class=\"p-hang\">H\xE3ng: ").concat(car.automaker, "</p>\n                ");
        carElement.addEventListener('click', function (event) {
          window.open("/showCarInfo?id_car=".concat(car.id_car), '_blank');
        });
        carCollection.appendChild(carElement);
      } else {
        // console.warn("Undefined car data at index", i); // Debug: Thông báo nếu xe không tồn tại
      }
    };
    for (var i = startIndex; i < endIndex; i++) {
      _loop();
    }
  }
  function formatCurrencyToString(amount) {
    var billion = Math.floor(amount / 1000000000);
    var million = Math.floor(amount % 1000000000 / 1000000);
    var result = "";
    if (billion > 0) {
      result += billion + " tỷ ";
    }
    if (million > 0) {
      result += million + " triệu ";
    }
    return result.trim();
  }
  function createPaginationButtons(data) {
    pagination.innerHTML = '';
    var totalPages = Math.ceil(totalCars / carsPerPage);
    var _loop2 = function _loop2(i) {
      var button = document.createElement('button');
      button.textContent = i;
      button.addEventListener('click', function () {
        currentPage = i;
        displayCars(currentPage, data);
        var allButtons = document.querySelectorAll('.pagination button');
        allButtons.forEach(function (btn) {
          return btn.classList.remove('active-page');
        });
        button.classList.add('active-page');
      });
      pagination.appendChild(button);
    };
    for (var i = 1; i <= totalPages; i++) {
      _loop2(i);
    }
  }
  prevButton.addEventListener('click', function () {
    if (currentPage > 1) {
      currentPage--;
      displayCars(currentPage);
    }
  });
  nextButton.addEventListener('click', function () {
    var totalPages = Math.ceil(totalCars / carsPerPage);
    if (currentPage < totalPages) {
      currentPage++;
      displayCars(currentPage);
    }
  });
  function getCars() {
    return _getCars.apply(this, arguments);
  }
  function _getCars() {
    _getCars = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {
      var response, data;
      return _regeneratorRuntime().wrap(function _callee2$(_context2) {
        while (1) switch (_context2.prev = _context2.next) {
          case 0:
            _context2.prev = 0;
            _context2.next = 3;
            return fetch('/getCars', {
              method: 'GET',
              headers: {
                'Content-Type': 'application/x-www-form-urlencoded'
              }
            });
          case 3:
            response = _context2.sent;
            if (response.ok) {
              _context2.next = 6;
              break;
            }
            throw new Error('Phản hồi mạng không ổn: ' + response.statusText);
          case 6:
            _context2.next = 8;
            return response.json();
          case 8:
            data = _context2.sent;
            if (!(Array.isArray(data) && data.length > 0)) {
              _context2.next = 16;
              break;
            }
            totalCars = data.length;
            cars = data.map(function (item) {
              return item.arrCars;
            });
            displayCars(currentPage, cars);
            createPaginationButtons(cars);
            _context2.next = 17;
            break;
          case 16:
            throw new Error('Không tìm thấy dữ liệu hoặc dữ liệu không đúng định dạng mong đợi.');
          case 17:
            _context2.next = 22;
            break;
          case 19:
            _context2.prev = 19;
            _context2.t0 = _context2["catch"](0);
            console.error('Có vấn đề với thao tác fetch của bạn:', _context2.t0);
          case 22:
          case "end":
            return _context2.stop();
        }
      }, _callee2, null, [[0, 19]]);
    }));
    return _getCars.apply(this, arguments);
  }
  function populateProvinceOptions(data) {
    var provinceSelect = document.getElementById('select-diachi');
    provinceSelect.innerHTML = '<option value="">Chọn tỉnh/thành phố</option>';
    var provincesMap = {};
    data.forEach(function (items) {
      provinceSelect.innerHTML += "<option value=\"".concat(items.province.id, "\">").concat(items.province.name, "</option>");
      provincesMap[items.province.id] = items.province.name;
    });
    provinceSelect.addEventListener('change', function () {
      var province_id = provinceSelect.value;
      if (provincesMap[province_id]) {
        appendLabel(provincesMap[province_id].trim());
        var targetProvince = provincesMap[province_id].trim();
        var regex = new RegExp("\\b".concat(targetProvince, "\\b"), 'i');
        var filteredCars = cars.filter(function (car) {
          return regex.test(car.diachi);
        });
        displayCars(1, filteredCars);
        createPaginationButtons(filteredCars);
      } else {
        clearDistrictOptions();
      }
    });
  }
  function clearDistrictOptions() {
    var districtSelect = document.getElementById('select-diachi');
    districtSelect.innerHTML = '<option value="">Chọn quận/huyện</option>';
  }
  function loadAddressData() {
    fetch('/address', {
      method: 'GET',
      headers: {
        'Content-Type': 'application/x-www-form-urlencoded'
      }
    }).then(function (response) {
      if (!response.ok) {
        throw new Error('Network response was not ok');
      }
      return response.json();
    }).then(function (data) {
      populateProvinceOptions(data);
    })["catch"](function (error) {
      console.error('Error loading address data:', error);
    });
  }
  function filterCarsByProvince(province_id) {
    var targetProvince = provincesMap[province_id].trim();
    var regex = new RegExp("\\b".concat(targetProvince, "\\b"), 'i');
    var filteredCars = cars.filter(function (car) {
      return regex.test(car.diachi);
    });
    return filteredCars;
  }
});
function formatCurrency(amount) {
  var parts = parseFloat(amount).toFixed(2).toString().split('.');
  parts[0] = parts[0].replace(/\B(?=(\d{3})+(?!\d))/g, ".");
  if (parts[1] === "00") {
    return parts[0];
  }
  return parts.join('.');
}
function selectLoc() {
  var Select = document.getElementById('select');
  var selectOptions = ['Giá từ thấp đến cao ', 'Giá từ cao đến thấp '];
  selectOptions.forEach(function (option) {
    var newOption = document.createElement('option');
    newOption.value = option;
    newOption.text = option;
    Select.appendChild(newOption);
  });
}
function SelectHangxe() {
  var SelectHangxe = document.getElementById('select-hangxe');
  var selectHangXeOptions = ['Toyota', 'Honda', 'Ford', 'Chevrolet', 'Volkswagen', 'BMW', 'Mercedes-Benz', 'Audi', 'Nissan', 'Hyundai'];
  selectHangXeOptions.forEach(function (option) {
    var newOption = document.createElement('option');
    newOption.value = option;
    newOption.text = option;
    SelectHangxe.appendChild(newOption);
  });
}
function getTimeDifference(timestamp) {
  var commentTime = new Date(timestamp);
  var currentTime = new Date();
  var timeDiff = currentTime - commentTime;
  var minutes = Math.floor(timeDiff / 1000 / 60);
  if (minutes < 60) {
    return "".concat(minutes, " ph\xFAt tr\u01B0\u1EDBc");
  }
  var hours = Math.floor(minutes / 60);
  if (hours < 24) {
    return "".concat(hours, " gi\u1EDD tr\u01B0\u1EDBc");
  }
  var days = Math.floor(hours / 24);
  if (days < 7) {
    return "".concat(days, " ng\xE0y tr\u01B0\u1EDBc");
  }
  var weeks = Math.floor(days / 7);
  if (weeks < 4) {
    return "".concat(weeks, " tu\u1EA7n tr\u01B0\u1EDBc");
  }
  var months = Math.floor(days / 30);
  if (months < 12) {
    return "".concat(months, " th\xE1ng tr\u01B0\u1EDBc");
  }
  var years = Math.floor(months / 12);
  return "".concat(years, " n\u0103m tr\u01B0\u1EDBc");
}
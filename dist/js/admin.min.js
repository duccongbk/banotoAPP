"use strict";

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
var _tableFactory = require("./tableFactory.js");
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }
function asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }
function _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }
var userProfile = document.getElementById('user-profile');
var dropdownMenu = document.getElementById('dropdown-menu');
var dropdownMenuUser = document.getElementById('dropdown-menu-Users');
var dropdownMenuProducts = document.getElementById('dropdown-menu-Products');
var searchcontainer = document.getElementById('searchContainer');
var currentPage = 1;
var currentTable = null;
var currentType = '';
document.addEventListener('DOMContentLoaded', function () {
  var urlParams = new URLSearchParams(window.location.search);
  var token = urlParams.get('token');
  document.cookie = "jwt=".concat(token, "; path=/;");
  getUser();
});
function getUser() {
  return _getUser.apply(this, arguments);
}
function _getUser() {
  _getUser = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {
    return _regeneratorRuntime().wrap(function _callee5$(_context5) {
      while (1) switch (_context5.prev = _context5.next) {
        case 0:
          fetch('/getUserByid', {
            method: 'GET',
            headers: {
              'Content-Type': 'application/x-www-form-urlencoded'
            }
          }).then(function (response) {
            if (!response.ok) {
              var confirmResult = confirm("Bạn cần đăng nhập để tiếp tục. Bạn có muốn chuyển đến trang đăng nhập không?");
              if (confirmResult === true) {
                window.open('/login', '_blank');
              }
              throw new Error('Network response was not ok');
            }
            return response.json();
          }).then(function (data) {
            if (data) {
              showUserInfo(data);
            }
          })["catch"](function (error) {
            console.error('There was a problem with your fetch operation:', error);
          });
        case 1:
        case "end":
          return _context5.stop();
      }
    }, _callee5);
  }));
  return _getUser.apply(this, arguments);
}
userProfile.addEventListener('click', function () {
  dropdownMenu.style.display = dropdownMenu.style.display === 'block' ? 'none' : 'block';
});
document.getElementById("Users").addEventListener("click", function () {
  if (dropdownMenuUser.style.display === "none") {
    dropdownMenuUser.style.display = "block";
  } else {
    dropdownMenuUser.style.display = "none";
  }
});
document.getElementById("Products").addEventListener("click", function () {
  if (dropdownMenuProducts.style.display === "none") {
    dropdownMenuProducts.style.display = "block";
  } else {
    dropdownMenuProducts.style.display = "none";
  }
});
document.getElementById('Show-btn1').addEventListener('click', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
  return _regeneratorRuntime().wrap(function _callee$(_context) {
    while (1) switch (_context.prev = _context.next) {
      case 0:
        userTable.style.display = 'table';
        searchcontainer.style.display = "block";
        currentType = 'users';
        currentTable = _tableFactory.TableFactory.createTable(currentType);
        _context.t0 = currentTable;
        _context.next = 7;
        return currentTable.fetchData('/getUsers');
      case 7:
        _context.t1 = _context.sent;
        _context.next = 10;
        return _context.t0.fetchDataAndDisplay.call(_context.t0, _context.t1, 1, 10);
      case 10:
      case "end":
        return _context.stop();
    }
  }, _callee);
})));
document.getElementById('Show-btn-Products').addEventListener('click', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {
  return _regeneratorRuntime().wrap(function _callee2$(_context2) {
    while (1) switch (_context2.prev = _context2.next) {
      case 0:
        userTable.style.display = 'table';
        searchcontainer.style.display = "block";
        currentPage = 1;
        currentType = 'cars';
        currentTable = _tableFactory.TableFactory.createTable(currentType);
        _context2.t0 = currentTable;
        _context2.next = 8;
        return currentTable.fetchData('/getCarsInfo');
      case 8:
        _context2.t1 = _context2.sent;
        _context2.next = 11;
        return _context2.t0.fetchDataAndDisplay.call(_context2.t0, _context2.t1, 1, 10);
      case 11:
      case "end":
        return _context2.stop();
    }
  }, _callee2);
})));
// document.getElementById('btn-reload').addEventListener('click', function () {
//     event.preventDefault();

// });

document.getElementById('searchInput').addEventListener('keypress', /*#__PURE__*/function () {
  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(event) {
    var typesearch;
    return _regeneratorRuntime().wrap(function _callee3$(_context3) {
      while (1) switch (_context3.prev = _context3.next) {
        case 0:
          if (!(event.key === 'Enter')) {
            _context3.next = 25;
            break;
          }
          event.preventDefault(); // Ngăn chặn hành động mặc định của phím Enter
          typesearch = document.getElementById('searchInput').value;
          _context3.t0 = currentType;
          _context3.next = _context3.t0 === 'users' ? 6 : _context3.t0 === 'cars' ? 14 : 22;
          break;
        case 6:
          _context3.t1 = currentTable;
          _context3.next = 9;
          return currentTable.fetchData('/getUsers');
        case 9:
          _context3.t2 = _context3.sent;
          _context3.t3 = typesearch;
          _context3.next = 13;
          return _context3.t1.search.call(_context3.t1, _context3.t2, _context3.t3, 1, 8);
        case 13:
          return _context3.abrupt("break", 24);
        case 14:
          _context3.t4 = currentTable;
          _context3.next = 17;
          return currentTable.fetchData('/getCarsInfo');
        case 17:
          _context3.t5 = _context3.sent;
          _context3.t6 = typesearch;
          _context3.next = 21;
          return _context3.t4.search.call(_context3.t4, _context3.t5, _context3.t6, 1, 10);
        case 21:
          return _context3.abrupt("break", 24);
        case 22:
          console.log('Unknown type');
          // Xử lý cho trường hợp loại không xác định
          return _context3.abrupt("break", 24);
        case 24:
          document.getElementById('searchInput').value = ''; // Xóa giá trị của trường tìm kiếm sau khi thực hiện tìm kiếm
        case 25:
        case "end":
          return _context3.stop();
      }
    }, _callee3);
  }));
  return function (_x) {
    return _ref3.apply(this, arguments);
  };
}());
document.getElementById('searchButton').addEventListener('click', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {
  var typesearch;
  return _regeneratorRuntime().wrap(function _callee4$(_context4) {
    while (1) switch (_context4.prev = _context4.next) {
      case 0:
        typesearch = document.getElementById('searchInput').value;
        _context4.t0 = currentType;
        _context4.next = _context4.t0 === 'users' ? 4 : _context4.t0 === 'cars' ? 12 : 20;
        break;
      case 4:
        _context4.t1 = currentTable;
        _context4.next = 7;
        return currentTable.fetchData('/getUsers');
      case 7:
        _context4.t2 = _context4.sent;
        _context4.t3 = typesearch;
        _context4.next = 11;
        return _context4.t1.search.call(_context4.t1, _context4.t2, _context4.t3, 1, 8);
      case 11:
        return _context4.abrupt("break", 22);
      case 12:
        _context4.t4 = currentTable;
        _context4.next = 15;
        return currentTable.fetchData('/getCarsInfo');
      case 15:
        _context4.t5 = _context4.sent;
        _context4.t6 = typesearch;
        _context4.next = 19;
        return _context4.t4.search.call(_context4.t4, _context4.t5, _context4.t6, 1, 10);
      case 19:
        return _context4.abrupt("break", 22);
      case 20:
        console.log('Unknown type');
        // Xử lý cho trường hợp loại không xác định
        return _context4.abrupt("break", 22);
      case 22:
        document.getElementById('searchInput').value = '';
      case 23:
      case "end":
        return _context4.stop();
    }
  }, _callee4);
})));
function showUserInfo(data) {
  var imgElement = document.getElementById("imageUser");
  var spanElement = document.getElementById("spanUser");
  imgElement.src = "C:\project\BanOto\public\images\0a0d3cbc-0068-4ec5-b663-e2b56db497d0-images (1).jfif";
  imgElement.alt = "User Avatar";
  // Lấy thẻ span chứa tên người dùng và thiết lập nội dung
  spanElement.textContent = data.ten;
}
function searchInfo(keyword, data) {
  document.getElementById('searchInput').value = '';
  switch (choosen) {
    case 'Cars':
      var _searchData = data.filter(function (item) {
        // Lọc các người dùng có tên chứa từ khóa tìm kiếm
        return item.arrCars.user_ten.toLowerCase().includes(keyword.toLowerCase());
      });
      createPagination(_searchData, 10, choosen);
      displayPage(_searchData, 1, 10, choosen);
      break;
    case 'Users':
      var searchData2 = data.filter(function (item) {
        // Lọc các người dùng có tên chứa từ khóa tìm kiếm
        return item.arrusers.ten.toLowerCase().includes(keyword.toLowerCase());
      });
      createPagination(searchData2, 10, choosen);
      displayPage(searchData2, 1, 10, choosen);
      break;
    default:
      console.log('I have no preference.');
  }
  var searchData = data.filter(function (item) {
    // Lọc các người dùng có tên chứa từ khóa tìm kiếm
    return item.arrCars.user_ten.toLowerCase().includes(keyword.toLowerCase());
  });
  createPagination(searchData, 10, "Cars", 1);
  displayPage(searchData, 1, 10, "Cars");
}
function convertTime(timezone) {
  var originalTime = new Date(timezone);
  originalTime.setHours(originalTime.getHours() + 7);
  var day = originalTime.getDate();
  var month = originalTime.getMonth() + 1;
  var year = originalTime.getFullYear();
  var hours = originalTime.getHours();
  var minutes = originalTime.getMinutes();
  var seconds = originalTime.getSeconds();
  var formattedDay = day < 10 ? "0".concat(day) : day;
  var formattedMonth = month < 10 ? "0".concat(month) : month;
  var formattedHours = hours < 10 ? "0".concat(hours) : hours;
  var formattedMinutes = minutes < 10 ? "0".concat(minutes) : minutes;
  var formattedSeconds = seconds < 10 ? "0".concat(seconds) : seconds;
  var formattedTime = "".concat(formattedDay, "-").concat(formattedMonth, "-").concat(year, " ").concat(formattedHours, ":").concat(formattedMinutes, ":").concat(formattedSeconds);
  return formattedTime;
}

// });
function deleteCar(id_car, currentPage) {
  // Hiển thị hộp thoại xác nhận
  var isConfirmed = confirm("Bạn có chắc chắn muốn xóa người dùng này?");

  // Kiểm tra xem người dùng đã xác nhận hoặc không
  if (isConfirmed) {
    // Tạo đối tượng chứa dữ liệu cần gửi

    // Gửi yêu cầu DELETE đến endpoint '/deleteUser' trên máy chủ
    fetch('/deleteCar', {
      method: 'DELETE',
      headers: {
        'Content-Type': 'application/x-www-form-urlencoded'
      },
      body: new URLSearchParams({
        id_car: id_car
      })
    }).then(function (response) {
      if (response.ok) {
        alert('User data deleted successfully');
        reloadData(currentPage);
        // refeshCar();
        // Thực hiện các hành động cần thiết khi xóa thành công (nếu có)
      } else {
        alert('Failed to delete user data:', response.statusText);
        // Xử lý khi có lỗi xảy ra
      }
    })["catch"](function (error) {
      console.error('Error deleting user data:', error);
      // Xử lý khi có lỗi xảy ra
    });
  } else {
    // Hủy thực hiện xóa
    // alert("Người dùng đã hủy xóa");
  }
}
function refeshCar(choosen) {
  choosen = "Cars";
  fetch('/getCarsInfo', {
    method: 'GET',
    headers: {
      'Content-Type': 'application/x-www-form-urlencoded'
    }
  }).then(function (response) {
    if (response.ok) {
      return response.json();
    } else {
      throw new Error('Đăng nhập không thành công');
    }
  }).then(function (data) {
    dataArr = data.slice();
    createPagination(data, 10, choosen);
    displayPage(data, 1, 10, choosen);
  })["catch"](function (error) {
    console.error('Đã xảy ra lỗi:', error);
  });
}
function editUser(id_user) {
  window.open("/editUser_Car?id_user=".concat(id_user), '_blank');
  console.error('Invalid option provided');
}
function editUserCar(id_car, option) {
  fetch('/updateCar', {
    method: 'PUT',
    headers: {
      'Content-Type': 'application/x-www-form-urlencoded'
    },
    body: new URLSearchParams({
      id_car: id_car,
      active: option
    })
  }).then(function (response) {
    if (response.ok) {
      alert('Car data updated successfully');
      // ShowCars();
    } else {
      alert('Failed to update user data:', response.statusText);
    }
  })["catch"](function (error) {
    console.error('Error updating user data:', error);
  });
}
function deleteUser(id_user) {
  // Hiển thị hộp thoại xác nhận
  var isConfirmed = confirm("Bạn có chắc chắn muốn xóa người dùng này?");

  // Kiểm tra xem người dùng đã xác nhận hoặc không
  if (isConfirmed) {
    // Tạo đối tượng chứa dữ liệu cần gửi

    // Gửi yêu cầu DELETE đến endpoint '/deleteUser' trên máy chủ
    fetch('/deleteUser', {
      method: 'DELETE',
      headers: {
        'Content-Type': 'application/x-www-form-urlencoded'
      },
      body: new URLSearchParams({
        id_user: id_user
      })
    }).then(function (response) {
      if (response.ok) {
        alert('User data deleted successfully');
        ShowUsers();

        // Thực hiện các hành động cần thiết khi xóa thành công (nếu có)
      } else {
        alert('Failed to delete user data:', response.statusText);
        // Xử lý khi có lỗi xảy ra
      }
    })["catch"](function (error) {
      console.error('Error deleting user data:', error);
      // Xử lý khi có lỗi xảy ra
    });
  } else {
    // Hủy thực hiện xóa
    // alert("Người dùng đã hủy xóa");
  }
}